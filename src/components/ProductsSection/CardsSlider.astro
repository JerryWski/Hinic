---
import Icon from 'astro-icon';
import data from '../../data/productsPreview.json';
import { t } from 'i18next';
---

<div class='reviews-container'>
  <button
    class='review-btn review-btn--prev'
    id='prev'
    aria-label='Previous Review'
  >
    <Icon name='feather:chevron-left' width='50' />
  </button>
  <div class='reviews'>
    {
      data.slice(data.length - 1).map((review) => (
        <div class='review'>
          <p class='review-name'>{t(review.name)}</p>
          <img src={review.image} alt={review.name} class='review-avatar' />
        </div>
      ))
    }
    {
      data.map((review) => (
        <div class='review'>
          <p class='review-name'>{t(review.name)}</p>
          <img src={review.image} alt={review.name} class='review-avatar' />
        </div>
      ))
    }
    {
      data.slice(0, 1).map((review) => (
        <div class='review'>
          <p class='review-name'>{t(review.name)}</p>
          <img src={review.image} alt={review.name} class='review-avatar' />
          <p class='review-name text-gradient h3'>{review.name}</p>
        </div>
      ))
    }
  </div>
  <div class='indicator-container'>
    {
      data.map((review) => (
        <button class="indicator ${review?.active && 'active'}" aria-label="indicator button" />
      ))
    }
  </div>
  <button
    class='review-btn grid-sm review-btn--next'
    id='next'
    aria-label='Next Review'
  >
    <Icon name='feather:chevron-right' width='50' />
  </button>
</div>

<style>
  .reviews-wrapper {
    background-color: transparent;
    margin: 0 calc(clamp(1rem, 1vw, 1rem) * -1);
  }

  .reviews-wrapper::after,
  .reviews-wrapper::before {
    inset-inline: 20%;
  }

  .reviews-container {
    overflow: hidden;
    position: relative;
    width: calc(100vw - clamp(1rem, 1vw, 1rem));
    background-color: hsl(var(--bkg));
  }

  .reviews {
    display: flex;
    margin: clamp(2rem, 4vw, 3rem) 0 clamp(0.5rem, 1vw, 1rem);
    text-align: center;
    transform: translateX(-100%);
    transition: transform 300ms ease-in-out;
  }

  .review {
    flex: 1 0 100%;
  }
.review-name {
  margin-bottom: 10px;
  font-size: 1.5rem;
  color: var(--logo-blue);
  font-weight: 700;
  font-family: var(--main-font);
}
  .review-avatar {
    max-width: 100%;
  }
  .review-content {
    max-width: 40%;
  }

  .review-btn {
    position: absolute;
    z-index: 10;
    top: 0;
    bottom: 0;
    background: none;
    border: none;
    color: inherit;
    padding: 0.25rem;
    cursor: pointer;
    transition: all 300ms ease;
  }

  .review-btn--prev {
    left: 0;
  }

  .review-btn--prev:is(:hover, :focus) {
    left: calc(-0.25rem * -1);
    color: var(--logo-blue);
  }
  .review-btn--next {
    right: 0;
  }

  .review-btn--next:is(:hover, :focus) {
    right: calc(0.25rem * -1);
    color: var(--logo-blue);
  }

  .indicator-container {
    position: absolute;
    left: 50%;
    bottom: 5px;
    display: flex;
    justify-content: center;
    gap: 1rem;
    transform: translateX(-50%);
  }

  .indicator {
    background: transparent;
    border: 0.15em solid var(--logo-blue);
    border-radius: 50%;
    padding: 7px;
    cursor: pointer;
  }

  .indicator.active {
    background: var(--logo-blue);
  }
  @media (min-width: 900px) {
    .review-btn {
      padding: 7rem;
    }
    .reviews-container {
      display: none;
    }
  }
</style>

<script>
    const reviewsSlider = document.querySelector('.reviews') as HTMLElement;
    const reviewBtns = document.querySelectorAll('.review-btn');
    const reviews = [...document.querySelectorAll('.review')];
    const indicators = [...document.querySelectorAll('.indicator')];
    let isMoving: boolean;
    let currentIndex = 1;
  
    function showActiveIndicator() {
      indicators.forEach((ind) => ind.classList.remove('active'));
      let activeIndicator;
      if (currentIndex === 0 || currentIndex === reviews.length - 2) {
        activeIndicator = indicators.length - 1;
      } else if (currentIndex === reviews.length - 1 || currentIndex === 1) {
        activeIndicator = 0;
      } else {
        activeIndicator = currentIndex - 1;
      }
      indicators[activeIndicator].classList.add('active');
    }
  
    const moveSlider = () => {
      reviewsSlider!.style.transform = `translateX(-${currentIndex * 100}%)`;
      showActiveIndicator();
    };
  
    function handleReviewBtnClick(e: Event) {
      if (isMoving) {
        return;
      }
      isMoving = true;
      const target = e.currentTarget as HTMLButtonElement;
      target.id === 'next' ? currentIndex++ : currentIndex--;
      moveSlider();
    }
  
    function handleIndicatorClick(e: Event) {
      const target = e.target as HTMLElement;
      if (isMoving || indicators.indexOf(target) + 1 === currentIndex) {
        return;
      }
      isMoving = true;
      currentIndex = indicators.indexOf(target) + 1;
      moveSlider();
    }
  
    // Event Listeners
    reviewBtns.forEach((btn) => {
      btn.addEventListener('click', handleReviewBtnClick);
    });
  
    indicators.forEach((ind) => {
      ind.addEventListener('click', handleIndicatorClick);
    });
  
    reviewsSlider!.addEventListener('transitionend', () => {
      isMoving = false;
      if (currentIndex === 0) {
        currentIndex = reviews.length - 2;
        reviewsSlider!.style.transitionDuration = '1ms';
        return moveSlider();
      }
      if (currentIndex === reviews.length - 1) {
        currentIndex = 1;
        reviewsSlider!.style.transitionDuration = '1ms';
        return moveSlider();
      }
      reviewsSlider!.style.transitionDuration = '300ms';
    });
  </script>